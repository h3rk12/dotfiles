# Start configuration added by Zim install {{{
#
# User configuration sourced by interactive shells
#

# -----------------
# Zsh configuration
# -----------------

#
# History
#

# Remove older command from the history if a duplicate is to be added.
setopt HIST_IGNORE_ALL_DUPS

#
# Input/output
#

# Set editor default keymap to emacs (`-e`) or vi (`-v`)
bindkey -e

# Prompt for spelling correction of commands.
#setopt CORRECT

# Customize spelling correction prompt.
#SPROMPT='zsh: correct %F{red}%R%f to %F{green}%r%f [nyae]? '

# Remove path separator from WORDCHARS.
WORDCHARS=${WORDCHARS//[\/]}

# -----------------
# Zim configuration
# -----------------

# Use degit instead of git as the default tool to install and update modules.
#zstyle ':zim:zmodule' use 'degit'

# --------------------
# Module configuration
# --------------------

#
# git
#

# Set a custom prefix for the generated aliases. The default prefix is 'G'.
#zstyle ':zim:git' aliases-prefix 'g'

#
# input
#

# Append `../` to your input for each `.` you type after an initial `..`
#zstyle ':zim:input' double-dot-expand yes

#
# termtitle
#

# Set a custom terminal title format using prompt expansion escape sequences.
# See http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html#Simple-Prompt-Escapes
# If none is provided, the default '%n@%m: %~' is used.
#zstyle ':zim:termtitle' format '%1~'

#
# zsh-autosuggestions
#

# Disable automatic widget re-binding on each precmd. This can be set when
# zsh-users/zsh-autosuggestions is the last module in your ~/.zimrc.
ZSH_AUTOSUGGEST_MANUAL_REBIND=1

# Customize the style that the suggestions are shown with.
# See https://github.com/zsh-users/zsh-autosuggestions/blob/master/README.md#suggestion-highlight-style
#ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=242'

#
# zsh-syntax-highlighting
#

# Set what highlighters will be used.
# See https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/docs/highlighters.md
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets)

# Customize the main highlighter styles.
# See https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/docs/highlighters/main.md#how-to-tweak-it
#typeset -A ZSH_HIGHLIGHT_STYLES
#ZSH_HIGHLIGHT_STYLES[comment]='fg=242'

# ------------------
# Initialize modules
# ------------------

ZIM_HOME=${ZDOTDIR:-${HOME}}/.zim
# Download zimfw plugin manager if missing.
if [[ ! -e ${ZIM_HOME}/zimfw.zsh ]]; then
  if (( ${+commands[curl]} )); then
    curl -fsSL --create-dirs -o ${ZIM_HOME}/zimfw.zsh \
        https://github.com/zimfw/zimfw/releases/latest/download/zimfw.zsh
  else
    mkdir -p ${ZIM_HOME} && wget -nv -O ${ZIM_HOME}/zimfw.zsh \
        https://github.com/zimfw/zimfw/releases/latest/download/zimfw.zsh
  fi
fi
# Install missing modules, and update ${ZIM_HOME}/init.zsh if missing or outdated.
if [[ ! ${ZIM_HOME}/init.zsh -nt ${ZDOTDIR:-${HOME}}/.zimrc ]]; then
  source ${ZIM_HOME}/zimfw.zsh init -q
fi
# Initialize modules.
source ${ZIM_HOME}/init.zsh

# ------------------------------
# Post-init module configuration
# ------------------------------

#
# zsh-history-substring-search
#

zmodload -F zsh/terminfo +p:terminfo
# Bind ^[[A/^[[B manually so up/down works both before and after zle-line-init
for key ('^[[A' '^P' ${terminfo[kcuu1]}) bindkey ${key} history-substring-search-up
for key ('^[[B' '^N' ${terminfo[kcud1]}) bindkey ${key} history-substring-search-down
for key ('k') bindkey -M vicmd ${key} history-substring-search-up
for key ('j') bindkey -M vicmd ${key} history-substring-search-down
unset key
# }}} End configuration added by Zim install

# Aliasses
alias cat='nocorrect bat'

abbr -S -='cd -'
abbr -S ...='../..'
abbr -S ....='../../..'

# Git
abbr -S g='git'

abbr -S ga='git add'
abbr -S gaa='git add --all'

abbr -S gb='git branch'
abbr -S gba='git branch -a'
abbr -S gbd='git branch -d'

abbr -S gbl='git blame -b -w'

abbr -S gc='git commit -v'
abbr -S gc!='git commit -v --amend'
abbr -S gca='git commit -a -v'
abbr -S gca!='git commit -a -v --amend'
abbr -S gcm='git commit -m'

abbr -S gcl='git clone --recurse-submodules'

abbr -S gco='git checkout'
abbr -S gcob='git checkout -b'
abbr -S gcom='git checkout (git_main_branch)'

abbr -S gcp='git cherry-pick'
abbr -S gcpa='git cherry-pick --abort'
abbr -S gcpc='git cherry-pick --continue'

abbr -S gd='git diff'

abbr -S gf='git fetch'
abbr -S gfa='git fetch --all --prune'
abbr -S gfo='git fetch origin'

abbr -S gl='git log'
abbr -S gls='git log --stat'
abbr -S glsp='git log --stat -p'
abbr -S glg='git log --graph'
abbr -S glgda='git log --graph --decorate --all'
abbr -S glgm='git log --graph --max-count=10'
abbr -S glo='git log --oneline --decorate'
abbr -S glog='git log --oneline --decorate --graph'
abbr -S gloga='git log --oneline --decorate --graph --all'

abbr -S gm='git merge'
abbr -S gma='git merge --abort'

abbr -S gp='git push'
abbr -S gpf='git push --force-with-lease'
abbr -S gpf!='git push --force'

abbr -S gpl='git pull'
abbr -S gplo='git pull origin'

abbr -S grb='git rebase'
abbr -S grba='git rebase --abort'
abbr -S grbc='git rebase --continue'
abbr -S grbi='git rebase -i'
abbr -S grbo='git rebase --onto'
abbr -S grbs='git rebase --skip'

abbr -S grs='git reset'
abbr -S grs!='git reset --hard'
abbr -S grsh='git reset HEAD'
abbr -S grsh!='git reset HEAD --hard'

abbr -S grm='git rm'

abbr -S gs='git status'

abbr -S gst='git stash'
abbr -S gsta='git stash apply'
abbr -S gstc='git stash clear'
abbr -S gstd='git stash drop'
abbr -S gstl='git stash list'
abbr -S gstp='git stash pop'
abbr -S gsts='git stash save'

abbr -S gsu='git submodule update'
